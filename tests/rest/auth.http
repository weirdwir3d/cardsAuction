### Register user successfully
# @name registerUserSuccessfully
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json

{
  "email": "supernewuser@gmail.com",
  "username": "newuser",
  "password": "password123",
  "confirmPassword": "password123"
}

> {%
    client.test("Status Code is 200", function() {
        client.assert(response.body.httpStatusCode === 200, "Expected 200, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'Logged in successfully'", function() {
        client.assert(response.body.message === "Logged in successfully", "Expected 'Logged in successfully', got " + response.body.message);
    });

    client.test("Token is returned", function() {
        client.assert(response.body.token, "Token is not returned");
    });
%}

### Register user with empty password
# @name registerEmptyPassword
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json

{
  "email": "newuser1@gmail.com",
  "username": "newuser",
  "password": "",
  "confirmPassword": ""
}

> {%
    client.test("Status Code is 400", function() {
        client.assert(response.body.httpStatusCode === 400, "Expected 400, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'Password cannot be empty'", function() {
        client.assert(response.body.message === "Password cannot be empty", "Expected 'Password cannot be empty', got " + response.body.message);
    });
%}

### Register user with mismatched passwords
# @name registerMismatchedPasswords
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json

{
  "email": "newuse2r@gmail.com",
  "username": "newuser",
  "password": "password123",
  "confirmPassword": "password321"
}

> {%
    client.test("Status Code is 401", function() {
        client.assert(response.body.httpStatusCode === 401, "Expected 401, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'Passwords don't match'", function() {
        client.assert(response.body.message === "Passwords don't match", "Expected 'Passwords don't match', got " + response.body.message);
    });
%}

### Register user with wrong email format
# @name registerWrongEmailFormat
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json

{
  "email": "newuse2rgmail.com",
  "username": "newuser",
  "password": "password123",
  "confirmPassword": "password123"
}

> {%
    client.test("Status Code is 400", function() {
        client.assert(response.body.httpStatusCode === 400, "Expected 400, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'Invalid email format'", function() {
        client.assert(response.body.message === "Invalid email format", "Expected 'Invalid email format', got " + response.body.message);
    });
%}

### Register user with wrong email format
# @name registerWrongEmailFormat
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json

{
  "email": "newuse2r@gmail.com",
  "username": "hi",
  "password": "password123",
  "confirmPassword": "password123"
}

> {%
    client.test("Status Code is 400", function() {
        client.assert(response.body.httpStatusCode === 400, "Expected 400, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'Username must be at least 4 characters long'", function() {
        client.assert(response.body.message === "Username must be at least 4 characters long", "Expected 'Username must be at least 4 characters long', got " + response.body.message);
    });
%}

### Log in user
# @name loginSuccessful
POST {{protocol}}{{host}}:{{port}}/auth/login
Content-Type: application/json

{
  "email": "admin@gmail.com",
  "password": "adminPassword"
}

> {%
    client.test(
        "Successful login",
        function() {
            client.assert(response.body.httpStatusCode === 200, "Response status is 200");
            client.global.set("token", response.body.token);
        }
    );
%}

### Log in user with wrong password
# @name loginWrongPassword
POST {{protocol}}{{host}}:{{port}}/auth/login
Content-Type: application/json

{
  "email": "admin@gmail.com",
  "password": "adminPasssword"
}

> {%
    client.test("Status Code is 401", function() {
        client.assert(response.body.httpStatusCode === 401, "Expected 401, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'Wrong password'", function() {
        client.assert(response.body.message === "Wrong password", "Expected 'Wrong password', got " + response.body.message);
    });
%}

### Log in user with wrong email
# @name loginWrongEmail
POST {{protocol}}{{host}}:{{port}}/auth/login
Content-Type: application/json

{
  "email": "admn@gmail.com",
  "password": "adminPassword"
}

> {%
    client.test("Status Code is 404", function() {
        client.assert(response.body.httpStatusCode === 404, "Expected 404, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'User not found'", function() {
        client.assert(response.body.message === "User not found", "Expected 'User not found', got " + response.body.message);
    });
%}

### Logout successfully with valid authToken
# @name logoutSuccessfully
POST {{protocol}}{{host}}:{{port}}/auth/logout
Content-Type: application/json
Cookie: authToken={{token}}

> {%
    client.test("Status Code is 200", function() {
        client.assert(response.body.httpStatusCode === 200, "Expected 200, got " + response.body.httpStatusCode);
    });

    client.test("Message is 'Logged out successfully'", function() {
        client.assert(response.body.message === "Logged out successfully", "Expected 'Logged out successfully', got " + response.body.message);
    });
%}
